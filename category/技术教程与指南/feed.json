{
    "version": "https://jsonfeed.org/version/1",
    "title": "代码与生活的交汇点 • All posts by \"技术教程与指南\" category",
    "description": "软件开发技术与生活的融合，代码与生活的交汇点",
    "home_page_url": "https://www.daxiangcoding.com",
    "items": [
        {
            "id": "https://www.daxiangcoding.com/2023/10/16/technical-tutorials/assignmentgo/",
            "url": "https://www.daxiangcoding.com/2023/10/16/technical-tutorials/assignmentgo/",
            "title": "Go语言如何赋值",
            "date_published": "2023-10-16T15:45:15.000Z",
            "content_html": "<h1 id=\"3-go语言如何赋值比如go语言的多重赋值\"><a class=\"markdownIt-Anchor\" href=\"#3-go语言如何赋值比如go语言的多重赋值\">#</a> 3-Go 语言如何赋值，比如 go 语言的多重赋值</h1>\n<p>笔者这里在学习 go 语言开发以太坊的时候，遇到过下面的语句：</p>\n<figure class=\"highlight go\"><figcaption data-lang=\"go\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>account <span class=\"token operator\">:=</span> common<span class=\"token punctuation\">.</span><span class=\"token function\">HexToAddress</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"0x71c7656ec7ab88b098defb751b7401b5f6d8976f\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>balance<span class=\"token punctuation\">,</span> err <span class=\"token operator\">:=</span> client<span class=\"token punctuation\">.</span><span class=\"token function\">BalanceAt</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">.</span><span class=\"token function\">Background</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> account<span class=\"token punctuation\">,</span> <span class=\"token boolean\">nil</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">if</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  log<span class=\"token punctuation\">.</span><span class=\"token function\">Fatal</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>balance<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>这里笔者有一个疑问，以下语句的赋值是什么意思？</p>\n<figure class=\"highlight go\"><figcaption data-lang=\"go\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>balance<span class=\"token punctuation\">,</span> err <span class=\"token operator\">:=</span> client<span class=\"token punctuation\">.</span><span class=\"token function\">BalanceAt</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">.</span><span class=\"token function\">Background</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> account<span class=\"token punctuation\">,</span> <span class=\"token boolean\">nil</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>为什么语句中，左边的变量会有两个而且用逗号隔开？<br>\n带着这个疑问，笔者又重新细致的阅读了 go 语言的赋值语句。</p>\n<h2 id=\"go-语言变量\"><a class=\"markdownIt-Anchor\" href=\"#go-语言变量\">#</a> Go 语言变量</h2>\n<p>Go 语言变量名由字母、数字、下划线组成，其中首个字符不能为数字。<br>\n声明变量的一般形式是使用 var 关键字：</p>\n<figure class=\"highlight go\"><figcaption data-lang=\"go\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">var</span> identifier <span class=\"token keyword\">type</span></pre></td></tr></table></figure><figure class=\"highlight go\"><figcaption data-lang=\"go\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">var</span> 变量名称 <span class=\"token keyword\">type</span></pre></td></tr></table></figure><p>可以一次声明多个变量：</p>\n<figure class=\"highlight go\"><figcaption data-lang=\"go\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">var</span> identifier1<span class=\"token punctuation\">,</span> identifier2 <span class=\"token keyword\">type</span></pre></td></tr></table></figure><p>案例如下：</p>\n<figure class=\"highlight go\"><figcaption data-lang=\"go\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">var</span> a<span class=\"token punctuation\">,</span> c <span class=\"token builtin\">int</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span></pre></td></tr></table></figure><h2 id=\"变量声明\"><a class=\"markdownIt-Anchor\" href=\"#变量声明\">#</a> 变量声明</h2>\n<h3 id=\"1-指定变量类型如果没有初始化则变量默认为零值\"><a class=\"markdownIt-Anchor\" href=\"#1-指定变量类型如果没有初始化则变量默认为零值\">#</a> 1. 指定变量类型，如果没有初始化，则变量默认为零值。</h3>\n<figure class=\"highlight go\"><figcaption data-lang=\"go\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 字符串为 \"\"（空字符串）</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">var</span> a <span class=\"token builtin\">string</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">// 没有初始化就为零值</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">var</span> b <span class=\"token builtin\">int</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token comment\">//bool 零值为 false</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">var</span> c <span class=\"token builtin\">bool</span></pre></td></tr></table></figure><p>总结一下，如果没有初始化变量，各类型变量的初始值：</p>\n<ul>\n<li>数值类型（包括 complex64/128）为 0</li>\n<li>布尔类型为 false</li>\n<li>字符串为 “”（空字符串）</li>\n<li>以下几种类型为 nil：<figure class=\"highlight go\"><figcaption data-lang=\"go\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">var</span> a <span class=\"token operator\">*</span><span class=\"token builtin\">int</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">var</span> a <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">int</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">var</span> a <span class=\"token keyword\">map</span><span class=\"token punctuation\">[</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">]</span> <span class=\"token builtin\">int</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">var</span> a <span class=\"token keyword\">chan</span> <span class=\"token builtin\">int</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">var</span> a <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">int</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">var</span> a <span class=\"token builtin\">error</span> <span class=\"token comment\">//error 是接口</span></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"2-根据值自行判定变量类型\"><a class=\"markdownIt-Anchor\" href=\"#2-根据值自行判定变量类型\">#</a> 2. 根据值自行判定变量类型</h3>\n<figure class=\"highlight go\"><figcaption data-lang=\"go\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> main</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token string\">\"fmt\"</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">var</span> a <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>输出的结果为：<br>\n <code>true</code></p>\n<h3 id=\"3-如果变量已经使用-var-声明过了再使用-声明变量就产生编译错误直接使用下面的语句即可\"><a class=\"markdownIt-Anchor\" href=\"#3-如果变量已经使用-var-声明过了再使用-声明变量就产生编译错误直接使用下面的语句即可\">#</a> 3. 如果变量已经使用 var 声明过了，再使用 := 声明变量，就产生编译错误；直接使用下面的语句即可：</h3>\n<figure class=\"highlight go\"><figcaption data-lang=\"go\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>v_name <span class=\"token operator\">:=</span> value</pre></td></tr></table></figure><h3 id=\"4-多变量声明\"><a class=\"markdownIt-Anchor\" href=\"#4-多变量声明\">#</a> 4. 多变量声明</h3>\n<p>Go 语言支持多重赋值，这意味着你可以同时给多个变量赋值。<br>\n<strong>多重赋值：</strong></p>\n<figure class=\"highlight go\"><figcaption data-lang=\"go\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> main</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token string\">\"fmt\"</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">var</span> x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">,</span> z <span class=\"token builtin\">int</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    x <span class=\"token operator\">=</span> <span class=\"token number\">10</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    y <span class=\"token operator\">=</span> <span class=\"token number\">20</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    z <span class=\"token operator\">=</span> <span class=\"token number\">30</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"x:\"</span><span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"y:\"</span><span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"z:\"</span><span class=\"token punctuation\">,</span> z<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><hr>\n<p><strong>同时赋值多个变量：</strong></p>\n<figure class=\"highlight go\"><figcaption data-lang=\"go\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> main</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token string\">\"fmt\"</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    x <span class=\"token operator\">:=</span> <span class=\"token number\">10</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    y <span class=\"token operator\">:=</span> <span class=\"token number\">20</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    z <span class=\"token operator\">:=</span> <span class=\"token number\">30</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"x:\"</span><span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"y:\"</span><span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"z:\"</span><span class=\"token punctuation\">,</span> z<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><hr>\n<p><strong>多重赋值示例：</strong></p>\n<figure class=\"highlight go\"><figcaption data-lang=\"go\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> main</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token string\">\"fmt\"</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    a<span class=\"token punctuation\">,</span> b <span class=\"token operator\">:=</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Before swap:\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"a:\"</span><span class=\"token punctuation\">,</span> a<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"b:\"</span><span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    a<span class=\"token punctuation\">,</span> b <span class=\"token operator\">=</span> b<span class=\"token punctuation\">,</span> a <span class=\"token comment\">// Swap the values using multiple assignment</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"After swap:\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"a:\"</span><span class=\"token punctuation\">,</span> a<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"b:\"</span><span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>在多重赋值中，右侧的表达式会在赋值操作之前求值，然后将其值赋给左侧的变量。这使得交换两个变量的值非常简单，如上面的示例所示。</p>\n<hr>\n<p><strong>在 Go 语言中，函数可以返回多个值，这是一项非常有用的特性。返回多个值的函数通常用于在单个函数调用中返回多个相关的结果，以减少函数的调用次数和代码复杂性。多个返回值在 Go 语言中通常被用于处理成功和错误情况、结果和错误信息等。</strong><br>\n以下是一个返回多个值的函数示例，展示了如何解释和使用这些值：</p>\n<figure class=\"highlight go\"><figcaption data-lang=\"go\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> main</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token string\">\"fmt\"</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">// 一个返回姓名和年龄的函数</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">func</span> <span class=\"token function\">getUserInfo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    name <span class=\"token operator\">:=</span> <span class=\"token string\">\"Alice\"</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    age <span class=\"token operator\">:=</span> <span class=\"token number\">30</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">return</span> name<span class=\"token punctuation\">,</span> age</pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token comment\">// 调用返回多个值的函数，并将结果分解为独立的变量</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    userName<span class=\"token punctuation\">,</span> userAge <span class=\"token operator\">:=</span> <span class=\"token function\">getUserInfo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"User Name:\"</span><span class=\"token punctuation\">,</span> userName<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"User Age:\"</span><span class=\"token punctuation\">,</span> userAge<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>在这个示例中，getUserInfo 函数返回两个值：姓名和年龄。在 main 函数中，我们调用了 getUserInfo 函数并将返回的值分解为 userName 和 userAge 两个变量，然后我们可以分别使用这两个变量。</p>\n<p><strong>这种方式使得函数返回多个相关的值非常方便，而且代码更加清晰易读。当然，你也可以使用 _ 来忽略其中一个或多个不感兴趣的返回值，例如：</strong></p>\n<figure class=\"highlight go\"><figcaption data-lang=\"go\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>userName<span class=\"token punctuation\">,</span> <span class=\"token boolean\">_</span> <span class=\"token operator\">:=</span> <span class=\"token function\">getUserInfo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 忽略年龄</span></pre></td></tr></table></figure><p>总结起来，Go 语言的多返回值机制允许你在函数中返回多个相关的值，并且使用解构赋值的方式将这些值分解到不同的变量中，从而简化代码并提高可读性。</p>\n",
            "tags": [
                "Ethereum",
                "development",
                "learning path"
            ]
        },
        {
            "id": "https://www.daxiangcoding.com/2023/10/09/technical-tutorials/useGoEthereum/",
            "url": "https://www.daxiangcoding.com/2023/10/09/technical-tutorials/useGoEthereum/",
            "title": "用Go来做以太坊开发",
            "date_published": "2023-10-09T14:29:06.000Z",
            "content_html": "<h1 id=\"2-用go来做以太坊开发\"><a class=\"markdownIt-Anchor\" href=\"#2-用go来做以太坊开发\">#</a> 2 - 用 Go 来做以太坊开发</h1>\n<p>这里可能有读者会问，为什么用 Go 语言做以太坊开发？当然以太坊开发，有其自己的语言 Solidity，那为什么不用其自己的语言呢？<br>\n笔者这里一开始也确实打算以 Solidity 语言去学习以太坊开发，那为什么又改用 Go 语言了呢？<br>\n很简单的原因，就是项目需要，后面的开发项目中，有要求是需要用 Go 语言，基于<strong>学习成本</strong>和<strong>实施成本</strong>的考虑。</p>\n<h2 id=\"那么这里可能还有不甘心的小伙伴儿会问solidity和go有什么不同呢\"><a class=\"markdownIt-Anchor\" href=\"#那么这里可能还有不甘心的小伙伴儿会问solidity和go有什么不同呢\">#</a> 那么这里可能还有不甘心的小伙伴儿会问 Solidity 和 Go 有什么不同呢？</h2>\n<p>它们分别用于以太坊的智能合约和底层开发。下面我会详细解释它们的不同以及如何选择。</p>\n<h2 id=\"solidity\"><a class=\"markdownIt-Anchor\" href=\"#solidity\">#</a> Solidity：</h2>\n<p><strong>Solidity</strong> 是一种专门为以太坊平台设计的智能合约编程语言。智能合约是在区块链上执行的自动化程序，可以实现各种功能，如数字资产交换、投票系统、去中心化应用（DApp）等。Solidity 具有以下特点：</p>\n<ul>\n<li>\n<p><strong>目标：</strong> Solidity 旨在实现智能合约的编写，使开发人员能够在以太坊平台上构建去中心化应用。</p>\n</li>\n<li>\n<p><strong>语法：</strong> Solidity 的语法与类似的编程语言（如 JavaScript）相似，使开发者相对容易上手。</p>\n</li>\n<li>\n<p><strong>合约：</strong> Solidity 用于编写智能合约，合约中包含状态变量、函数、事件等，用于实现业务逻辑。</p>\n</li>\n<li>\n<p><strong>特点：</strong> Solidity 具备丰富的特性，如状态变量、修饰器、事件、继承等，用于支持复杂的智能合约开发。</p>\n</li>\n</ul>\n<p><strong>示例：</strong> 下面是一个简单的 Solidity 智能合约，实现一个简单的数字投票系统。</p>\n<figure class=\"highlight solidity\"><figcaption data-lang=\"Solidity (Ethereum)\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// SPDX-License-Identifier: MIT</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">pragma</span> <span class=\"token keyword\">solidity</span> <span class=\"token operator\">^</span><span class=\"token version number\">0.8.0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">contract</span> <span class=\"token class-name\">SimpleVoting</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token builtin\">uint256</span> <span class=\"token keyword\">public</span> yesVotes<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token builtin\">uint256</span> <span class=\"token keyword\">public</span> noVotes<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">function</span> <span class=\"token function\">voteYes</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">public</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        yesVotes<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">function</span> <span class=\"token function\">voteNo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">public</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        noVotes<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"go\"><a class=\"markdownIt-Anchor\" href=\"#go\">#</a> Go：</h2>\n<p><strong>Go</strong> 是一种通用编程语言，用于开发各种类型的应用程序，包括底层开发、Web 开发、后端开发等。在区块链领域，Go 通常用于开发区块链节点和工具，如以太坊客户端（Geth）、Hyperledger Fabric 等。</p>\n<ul>\n<li>\n<p><strong>目标：</strong> Go 用于通用软件开发，区块链领域中主要用于开发区块链节点、工具和底层功能。</p>\n</li>\n<li>\n<p><strong>语法：</strong> Go 具有简洁而现代的语法，强调可读性和高效性。</p>\n</li>\n<li>\n<p><strong>应用：</strong> Go 在区块链领域广泛应用于开发底层区块链网络、节点、钱包、工具等。</p>\n</li>\n</ul>\n<p><strong>示例：</strong> 下面是一个使用 Go 编写的简单命令行工具，用于生成区块链账户地址。</p>\n<figure class=\"highlight go\"><figcaption data-lang=\"go\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> main</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t<span class=\"token string\">\"fmt\"</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t<span class=\"token string\">\"log\"</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t<span class=\"token string\">\"github.com/ethereum/go-ethereum/accounts/keystore\"</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\tks <span class=\"token operator\">:=</span> keystore<span class=\"token punctuation\">.</span><span class=\"token function\">NewKeyStore</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"./keystore\"</span><span class=\"token punctuation\">,</span> keystore<span class=\"token punctuation\">.</span>StandardScryptN<span class=\"token punctuation\">,</span> keystore<span class=\"token punctuation\">.</span>StandardScryptP<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\taccount<span class=\"token punctuation\">,</span> err <span class=\"token operator\">:=</span> ks<span class=\"token punctuation\">.</span><span class=\"token function\">NewAccount</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"passphrase\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t<span class=\"token keyword\">if</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t\tlog<span class=\"token punctuation\">.</span><span class=\"token function\">Fatal</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Account address: %s\\n\"</span><span class=\"token punctuation\">,</span> account<span class=\"token punctuation\">.</span>Address<span class=\"token punctuation\">.</span><span class=\"token function\">Hex</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"如何选择\"><a class=\"markdownIt-Anchor\" href=\"#如何选择\">#</a> 如何选择：</h2>\n<ul>\n<li>\n<p><strong>Solidity：</strong> 选择 Solidity，如果你想在以太坊平台上开发智能合约，构建去中心化应用程序（DApp），并与以太坊网络进行交互。Solidity 是专门为这些用例设计的。</p>\n</li>\n<li>\n<p><strong>Go：</strong> 选择 Go，如果你想参与底层区块链开发，如开发节点、客户端、工具，以及与区块链网络进行交互。Go 在这些领域有着广泛的应用。</p>\n</li>\n</ul>\n<p>最终，选择取决于你的项目需求和兴趣领域。如果你对智能合约和去中心化应用感兴趣，那么学习 Solidity 是一个不错的选择。如果你对底层区块链开发和工具有兴趣，那么学习 Go 会更有帮助。</p>\n",
            "tags": [
                "Ethereum",
                "development",
                "go"
            ]
        },
        {
            "id": "https://www.daxiangcoding.com/2023/10/09/technical-tutorials/ethereumLearningPath/",
            "url": "https://www.daxiangcoding.com/2023/10/09/technical-tutorials/ethereumLearningPath/",
            "title": "以太坊开发学习路径",
            "date_published": "2023-10-09T14:08:19.000Z",
            "content_html": "<h1 id=\"1-以太坊开发学习路径\"><a class=\"markdownIt-Anchor\" href=\"#1-以太坊开发学习路径\">#</a> 1 - 以太坊开发学习路径</h1>\n<p>如果你是一位不懂以太坊的开发人员，想要快速学习以太坊开发，可以按照以下步骤进行学习。以太坊是一种基于区块链的平台，允许开发者构建分布式应用程序和智能合约。<br>\n下面是一个学习路径的简要指南，帮助你入门以太坊开发。</p>\n<h2 id=\"步骤-1了解基本概念\"><a class=\"markdownIt-Anchor\" href=\"#步骤-1了解基本概念\">#</a> 步骤 1：了解基本概念</h2>\n<p><strong>首先，你需要理解以下基本概念：</strong></p>\n<ul>\n<li>区块链的基本原理</li>\n<li>以太坊平台的特点和目标</li>\n<li>智能合约是什么，以及它们如何在以太坊上运行</li>\n</ul>\n<h2 id=\"步骤-2学习-solidity-编程语言\"><a class=\"markdownIt-Anchor\" href=\"#步骤-2学习-solidity-编程语言\">#</a> 步骤 2：学习 Solidity 编程语言</h2>\n<p>Solidity 是一种用于编写智能合约的编程语言。你可以学习以下内容：</p>\n<ul>\n<li>Solidity 的语法和基本结构</li>\n<li>数据类型、变量和函数的使用</li>\n<li>智能合约的生命周期</li>\n</ul>\n<h3 id=\"示例-编写一个简单的智能合约实现一个简单的数字投票系统\"><a class=\"markdownIt-Anchor\" href=\"#示例-编写一个简单的智能合约实现一个简单的数字投票系统\">#</a> 示例： 编写一个简单的智能合约，实现一个简单的数字投票系统。</h3>\n<figure class=\"highlight solidity\"><figcaption data-lang=\"Solidity (Ethereum)\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// SPDX-License-Identifier: MIT</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">pragma</span> <span class=\"token keyword\">solidity</span> <span class=\"token operator\">^</span><span class=\"token version number\">0.8.0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">contract</span> <span class=\"token class-name\">SimpleVoting</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token builtin\">uint256</span> <span class=\"token keyword\">public</span> yesVotes<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token builtin\">uint256</span> <span class=\"token keyword\">public</span> noVotes<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">function</span> <span class=\"token function\">voteYes</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">public</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        yesVotes<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">function</span> <span class=\"token function\">voteNo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">public</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        noVotes<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"步骤-3安装和配置开发环境\"><a class=\"markdownIt-Anchor\" href=\"#步骤-3安装和配置开发环境\">#</a> 步骤 3：安装和配置开发环境</h2>\n<p><strong>安装必要的工具和软件，包括：</strong></p>\n<ul>\n<li>以太坊客户端（如 Ganache）</li>\n<li>Solidity 编译器</li>\n<li>Web3.js（用于与以太坊网络进行交互）</li>\n</ul>\n<h2 id=\"步骤-4开发和部署智能合约\"><a class=\"markdownIt-Anchor\" href=\"#步骤-4开发和部署智能合约\">#</a> 步骤 4：开发和部署智能合约</h2>\n<p><strong>学习如何开发、编译和部署智能合约：</strong></p>\n<ul>\n<li>使用 Solidity 编写更复杂的智能合约</li>\n<li>使用 Truffle 或 Remix 等工具进行合约的编译和部署</li>\n</ul>\n<p>示例： 开发一个简单的去中心化存款合约，允许用户存入和取出代币。</p>\n<h2 id=\"步骤-5与以太坊交互\"><a class=\"markdownIt-Anchor\" href=\"#步骤-5与以太坊交互\">#</a> 步骤 5：与以太坊交互</h2>\n<p><strong>了解如何通过 Web3.js 与以太坊网络进行交互：</strong></p>\n<ul>\n<li>查询区块链上的数据</li>\n<li>发送交易和调用智能合约的方法</li>\n</ul>\n<p>示例： 使用 Web3.js 创建一个界面，显示智能合约中的投票结果，并提供投票按钮。</p>\n<h2 id=\"步骤-6学习-dapp-开发\"><a class=\"markdownIt-Anchor\" href=\"#步骤-6学习-dapp-开发\">#</a> 步骤 6：学习 DApp 开发</h2>\n<p><strong>学习如何开发去中心化应用程序（DApp）：</strong></p>\n<ul>\n<li>使用前端框架（如 React）构建用户界面</li>\n<li>通过 Web3.js 与智能合约交互</li>\n<li>使用 MetaMask 等钱包扩展与以太坊网络连接</li>\n</ul>\n<p>示例： 开发一个简单的 DApp，让用户可以通过界面投票，并实时查看投票结果。</p>\n<h2 id=\"步骤-7深入学习高级主题\"><a class=\"markdownIt-Anchor\" href=\"#步骤-7深入学习高级主题\">#</a> 步骤 7：深入学习高级主题</h2>\n<p><strong>一旦掌握了基本概念和技能，可以继续学习以下高级主题：</strong></p>\n<ul>\n<li>以太坊安全性和攻击方式</li>\n<li>智能合约最佳实践</li>\n<li>去中心化金融（DeFi）、非同质化代币（NFT）等领域的开发</li>\n</ul>\n<h2 id=\"步骤-8参与社区和项目\"><a class=\"markdownIt-Anchor\" href=\"#步骤-8参与社区和项目\">#</a> 步骤 8：参与社区和项目</h2>\n<p>加入以太坊开发社区，参与开源项目，与其他开发者交流经验和知识。</p>\n<h3 id=\"这只是一个学习路径的简要指南你可以根据自己的学习进度和需求来深入学习以太坊开发-记得不断练习和实践才能更好地掌握这些概念和技能\"><a class=\"markdownIt-Anchor\" href=\"#这只是一个学习路径的简要指南你可以根据自己的学习进度和需求来深入学习以太坊开发-记得不断练习和实践才能更好地掌握这些概念和技能\">#</a> 这只是一个学习路径的简要指南，你可以根据自己的学习进度和需求来深入学习以太坊开发。记得不断练习和实践，才能更好地掌握这些概念和技能。</h3>\n",
            "tags": [
                "Ethereum",
                "development",
                "learning path"
            ]
        }
    ]
}